(**************************************************************************
 * You can add new test cases by adding new elements to the following lists
 * Format is:
 * TEST<X>ARG(<weight>, <function_name>, <arg1>, <arg2>, ..., <argX>)
 *
 * <X> is the number of argument that the function being tested takes.
 **************************************************************************)
open Mp3common

let id = fun x -> x;;

(* This list is for regular problems *)
let rubric =
[
  TEST1ARG(1, minmax, [1;-2;4;5;-8]);
  TEST1ARG(1, minmax_list, [[1];[-1;2];[1;3;4];[]]);
  TEST1ARG(1, cumlist, [1;2;3]);
  TEST2ARG(1, revsplit, (fun x -> x < 0), [-1; 4; -2; 3; 0; 1]);
  TEST3ARG(1, andk, true, false, id);
  TEST3ARG(1, ork, true, false, id);
  TEST3ARG(1, landk, 0, 1, id);
  TEST3ARG(1, lork, 0, 1, id);
  TEST3ARG(1, lxork, 0, 1, id);
  TEST2ARG(1, expk, 1.0, id);
  TEST2ARG(1, logk, 2.0, id);
  TEST3ARG(1, powk, 2.0,3.0, id);
  TEST4ARG(1, modaddk, 5, 7, 10, id);
  TEST4ARG(1, modsubk, 12, 4, 7, id);
  TEST4ARG(1, modmulk, 3, 4, 8, id);
  TEST4ARG(1, modeqk, 6, 5, 11, id);
  TEST2ARG(1, power, 2, 3);
  TEST3ARG(1, powerk, 2, 3, id);
  TEST1ARG(1, dup_alt, [1;2;3;4]);
  TEST2ARG(1, dup_altk, [1;2;3;4], id);
  TEST2ARG(1, rev_map, (fun x -> print_int x; x + 1), [1;2;3;4;5]);
  TEST3ARG(1, rev_mapk, (fun x -> fun k -> print_intk x (fun t -> addk x 1 k)), [1;2;3;4;5], (fun x -> x));
  TEST2ARG(1, partition, [1;2;3;4;5], (fun x -> x >= 3));
  TEST3ARG(1, partitionk, [1;2;3;4;5], (fun x -> fun k -> geqk x 3 k), (fun x -> x));
]
(* 




*)

(* Note: the last entry should not be followed by a semicolon. *)

let extra_rubric = [ 
]

