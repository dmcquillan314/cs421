type token =
  | INT of (int)
  | REAL of (float)
  | BOOL of (bool)
  | STRING of (string)
  | IDENT of (string)
  | OPCOM of ((int*int))
  | CLCOM of ((int*int))
  | NEG
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | DPLUS
  | DMINUS
  | DTIMES
  | DDIV
  | CARAT
  | LT
  | GT
  | LEQ
  | GEQ
  | EQUALS
  | NEQ
  | PIPE
  | ARROW
  | SEMI
  | DCOLON
  | AT
  | NIL
  | LET
  | LOCAL
  | VAL
  | REC
  | AND
  | END
  | IN
  | IF
  | THEN
  | ELSE
  | FUN
  | FN
  | OP
  | MOD
  | RAISE
  | HANDLE
  | WITH
  | NOT
  | ANDALSO
  | ORELSE
  | HD
  | TL
  | FST
  | SND
  | LBRAC
  | RBRAC
  | LPAREN
  | RPAREN
  | COMMA
  | UNDERSCORE
  | UNIT
  | ERROR
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "student.mly"
    open Mp8common

    let mon_app mon_op x = MonOpAppExp( mon_op, x )
    let bin_app bin_op x y = BinOpAppExp( bin_op, x, y )
    let cr_orelse x y = IfExp(x, ConstExp(BoolConst true), y) 
    let cr_andalso x y = IfExp(x, y, ConstExp(BoolConst false) )

# 76 "student.ml"
let yytransl_const = [|
  264 (* NEG *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIV *);
  269 (* DPLUS *);
  270 (* DMINUS *);
  271 (* DTIMES *);
  272 (* DDIV *);
  273 (* CARAT *);
  274 (* LT *);
  275 (* GT *);
  276 (* LEQ *);
  277 (* GEQ *);
  278 (* EQUALS *);
  279 (* NEQ *);
  280 (* PIPE *);
  281 (* ARROW *);
  282 (* SEMI *);
  283 (* DCOLON *);
  284 (* AT *);
  285 (* NIL *);
  286 (* LET *);
  287 (* LOCAL *);
  288 (* VAL *);
  289 (* REC *);
  290 (* AND *);
  291 (* END *);
  292 (* IN *);
  293 (* IF *);
  294 (* THEN *);
  295 (* ELSE *);
  296 (* FUN *);
  297 (* FN *);
  298 (* OP *);
  299 (* MOD *);
  300 (* RAISE *);
  301 (* HANDLE *);
  302 (* WITH *);
  303 (* NOT *);
  304 (* ANDALSO *);
  305 (* ORELSE *);
  306 (* HD *);
  307 (* TL *);
  308 (* FST *);
  309 (* SND *);
  310 (* LBRAC *);
  311 (* RBRAC *);
  312 (* LPAREN *);
  313 (* RPAREN *);
  314 (* COMMA *);
  315 (* UNDERSCORE *);
  316 (* UNIT *);
  317 (* ERROR *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* REAL *);
  259 (* BOOL *);
  260 (* STRING *);
  261 (* IDENT *);
  262 (* OPCOM *);
  263 (* CLCOM *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\003\000\003\000\004\000\004\000\004\000\004\000\
\006\000\006\000\005\000\005\000\002\000\002\000\009\000\009\000\
\007\000\007\000\010\000\010\000\011\000\011\000\012\000\012\000\
\013\000\013\000\014\000\014\000\016\000\016\000\017\000\017\000\
\019\000\019\000\018\000\018\000\021\000\021\000\022\000\022\000\
\024\000\024\000\008\000\008\000\008\000\029\000\029\000\025\000\
\025\000\025\000\030\000\030\000\026\000\026\000\026\000\032\000\
\032\000\027\000\027\000\031\000\031\000\031\000\031\000\031\000\
\031\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\035\000\035\000\035\000\035\000\035\000\038\000\020\000\
\020\000\020\000\020\000\020\000\023\000\023\000\023\000\023\000\
\033\000\033\000\033\000\033\000\033\000\028\000\028\000\028\000\
\028\000\028\000\015\000\015\000\015\000\039\000\039\000\039\000\
\039\000\037\000\040\000\040\000\036\000\036\000\036\000\041\000\
\041\000\042\000\042\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\002\000\002\000\004\000\003\000\005\000\
\003\000\002\000\003\000\003\000\001\000\001\000\001\000\003\000\
\003\000\001\000\003\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\003\000\001\000\
\003\000\001\000\003\000\001\000\003\000\001\000\003\000\001\000\
\001\000\001\000\001\000\002\000\002\000\001\000\002\000\001\000\
\002\000\002\000\001\000\001\000\006\000\004\000\002\000\001\000\
\001\000\001\000\001\000\001\000\002\000\001\000\001\000\001\000\
\005\000\001\000\001\000\001\000\001\000\002\000\001\000\001\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\001\000\003\000\003\000\005\000\005\000\001\000\
\004\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\066\000\068\000\067\000\069\000\062\000\000\000\
\071\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\
\116\000\000\000\000\000\003\000\013\000\014\000\000\000\018\000\
\000\000\022\000\000\000\026\000\000\000\000\000\030\000\034\000\
\000\000\038\000\040\000\041\000\000\000\000\000\000\000\000\000\
\059\000\060\000\063\000\064\000\000\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\000\000\080\000\082\000\087\000\
\085\000\081\000\083\000\088\000\086\000\084\000\102\000\099\000\
\103\000\104\000\100\000\105\000\077\000\078\000\074\000\075\000\
\076\000\061\000\101\000\055\000\042\000\070\000\000\000\000\000\
\073\000\000\000\001\000\002\000\004\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\049\000\089\000\090\000\
\091\000\092\000\093\000\052\000\000\000\045\000\058\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\
\000\000\106\000\000\000\109\000\000\000\017\000\000\000\021\000\
\000\000\025\000\000\000\000\000\000\000\048\000\000\000\000\000\
\029\000\000\000\033\000\000\000\037\000\039\000\000\000\000\000\
\000\000\011\000\006\000\012\000\000\000\000\000\010\000\054\000\
\108\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\008\000\000\000\009\000\110\000\000\000\111\000\000\000\
\016\000\053\000\000\000\113\000"

let yydgoto = "\002\000\
\025\000\143\000\027\000\028\000\058\000\119\000\029\000\030\000\
\144\000\031\000\032\000\033\000\034\000\035\000\096\000\036\000\
\037\000\038\000\039\000\099\000\040\000\041\000\100\000\042\000\
\043\000\044\000\045\000\046\000\047\000\110\000\048\000\000\000\
\049\000\050\000\082\000\051\000\052\000\000\000\083\000\088\000\
\156\000\000\000"

let yysindex = "\010\000\
\099\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\124\255\124\255\009\255\023\002\014\255\020\255\125\255\
\023\002\000\000\000\000\000\000\000\000\159\001\219\001\000\000\
\000\000\008\255\082\001\000\000\000\000\000\000\001\255\000\000\
\005\255\000\000\172\001\000\000\028\255\092\255\000\000\000\000\
\169\001\000\000\000\000\000\000\000\000\099\002\083\002\000\000\
\000\000\000\000\000\000\000\000\048\255\102\001\050\255\070\255\
\072\255\000\000\057\255\094\255\098\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\059\255\078\255\
\000\000\000\255\000\000\000\000\000\000\023\002\023\002\023\002\
\099\002\023\002\023\002\023\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\002\
\124\255\023\002\094\255\023\002\023\002\047\255\000\000\023\002\
\023\002\000\000\023\002\000\000\023\002\000\000\005\255\000\000\
\172\001\000\000\028\255\083\255\169\001\000\000\099\002\159\002\
\000\000\092\255\000\000\169\001\000\000\000\000\128\255\147\255\
\016\000\000\000\000\000\000\000\152\255\023\002\000\000\000\000\
\000\000\129\255\134\255\144\255\099\002\099\002\000\000\023\002\
\000\000\000\000\023\002\000\000\000\000\023\002\000\000\169\001\
\000\000\000\000\146\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\083\000\143\000\203\000\007\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\155\255\000\000\251\254\000\000\041\255\109\255\000\000\000\000\
\018\255\000\000\000\000\000\000\211\002\000\000\000\000\158\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\162\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\219\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\156\255\000\000\
\029\255\000\000\014\002\210\001\018\255\000\000\000\000\000\000\
\000\000\000\000\000\000\156\001\000\000\000\000\245\254\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\168\255\000\000\000\000\000\000\067\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\156\001\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\255\255\253\255\232\255\000\000\161\255\244\255\243\255\
\150\255\000\000\125\000\132\000\148\000\149\000\231\000\207\255\
\156\000\014\000\000\000\246\255\154\000\175\255\241\255\162\000\
\212\255\217\000\224\255\169\255\172\255\000\000\218\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\
\100\000\000\000"

let yytablesize = 1037
let yytable = "\026\000\
\081\000\102\000\093\000\085\000\084\000\080\000\053\000\054\000\
\111\000\135\000\001\000\059\000\136\000\055\000\109\000\133\000\
\154\000\140\000\060\000\147\000\087\000\090\000\151\000\015\000\
\061\000\123\000\036\000\036\000\093\000\093\000\036\000\036\000\
\101\000\091\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\056\000\024\000\024\000\036\000\015\000\130\000\135\000\
\137\000\094\000\136\000\118\000\095\000\169\000\097\000\142\000\
\124\000\125\000\028\000\028\000\028\000\028\000\028\000\028\000\
\134\000\036\000\036\000\057\000\150\000\135\000\135\000\114\000\
\136\000\136\000\115\000\168\000\023\000\023\000\011\000\012\000\
\085\000\085\000\085\000\112\000\085\000\085\000\085\000\014\000\
\028\000\028\000\102\000\062\000\063\000\116\000\117\000\066\000\
\067\000\111\000\118\000\070\000\062\000\063\000\134\000\159\000\
\066\000\067\000\085\000\152\000\070\000\145\000\132\000\138\000\
\146\000\142\000\148\000\149\000\121\000\158\000\098\000\087\000\
\093\000\157\000\120\000\155\000\134\000\134\000\032\000\032\000\
\032\000\032\000\032\000\032\000\122\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\164\000\085\000\170\000\077\000\
\158\000\160\000\011\000\012\000\032\000\032\000\046\000\046\000\
\046\000\046\000\046\000\014\000\155\000\046\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\161\000\078\000\058\000\
\058\000\165\000\046\000\046\000\058\000\058\000\163\000\166\000\
\058\000\058\000\046\000\058\000\058\000\058\000\046\000\046\000\
\167\000\046\000\172\000\020\000\019\000\058\000\058\000\046\000\
\046\000\046\000\046\000\046\000\058\000\046\000\058\000\058\000\
\107\000\046\000\126\000\047\000\047\000\047\000\047\000\047\000\
\112\000\127\000\047\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\128\000\129\000\051\000\050\000\079\000\047\000\
\047\000\051\000\051\000\131\000\139\000\051\000\051\000\047\000\
\051\000\051\000\051\000\047\000\047\000\141\000\047\000\108\000\
\153\000\171\000\050\000\050\000\047\000\047\000\047\000\047\000\
\047\000\051\000\047\000\051\000\051\000\000\000\047\000\094\000\
\094\000\094\000\094\000\094\000\000\000\000\000\094\000\089\000\
\089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
\089\000\089\000\089\000\089\000\089\000\089\000\011\000\012\000\
\089\000\089\000\162\000\094\000\094\000\089\000\089\000\014\000\
\000\000\089\000\089\000\000\000\089\000\089\000\089\000\000\000\
\094\000\000\000\000\000\000\000\000\000\000\000\089\000\089\000\
\094\000\094\000\094\000\094\000\094\000\089\000\094\000\089\000\
\089\000\000\000\094\000\095\000\095\000\095\000\095\000\095\000\
\000\000\000\000\095\000\090\000\090\000\090\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
\090\000\090\000\000\000\000\000\090\000\090\000\000\000\095\000\
\095\000\090\000\090\000\000\000\000\000\090\000\090\000\000\000\
\090\000\090\000\090\000\000\000\095\000\000\000\000\000\000\000\
\000\000\000\000\090\000\090\000\095\000\095\000\095\000\095\000\
\095\000\090\000\095\000\090\000\090\000\000\000\095\000\096\000\
\096\000\096\000\096\000\096\000\000\000\000\000\096\000\091\000\
\091\000\091\000\091\000\091\000\091\000\091\000\091\000\091\000\
\091\000\091\000\091\000\091\000\091\000\091\000\000\000\000\000\
\091\000\091\000\000\000\096\000\096\000\091\000\091\000\000\000\
\000\000\091\000\091\000\000\000\091\000\091\000\091\000\000\000\
\096\000\000\000\000\000\000\000\000\000\000\000\091\000\091\000\
\096\000\096\000\096\000\096\000\096\000\091\000\096\000\091\000\
\091\000\000\000\096\000\097\000\097\000\097\000\097\000\097\000\
\000\000\000\000\097\000\092\000\092\000\092\000\092\000\092\000\
\092\000\092\000\092\000\092\000\092\000\092\000\092\000\092\000\
\092\000\092\000\000\000\000\000\092\000\092\000\000\000\097\000\
\097\000\092\000\092\000\000\000\000\000\092\000\092\000\000\000\
\092\000\092\000\092\000\000\000\097\000\000\000\000\000\000\000\
\000\000\000\000\092\000\092\000\097\000\097\000\097\000\097\000\
\097\000\092\000\097\000\092\000\092\000\000\000\097\000\098\000\
\098\000\098\000\098\000\098\000\000\000\000\000\098\000\093\000\
\093\000\093\000\093\000\093\000\093\000\093\000\093\000\093\000\
\093\000\093\000\093\000\093\000\093\000\093\000\000\000\000\000\
\093\000\093\000\000\000\098\000\098\000\093\000\093\000\000\000\
\000\000\093\000\093\000\000\000\093\000\093\000\093\000\000\000\
\098\000\000\000\000\000\000\000\000\000\000\000\093\000\093\000\
\098\000\098\000\098\000\098\000\098\000\093\000\098\000\093\000\
\093\000\000\000\098\000\047\000\047\000\047\000\047\000\047\000\
\000\000\000\000\047\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\000\000\000\000\000\000\050\000\000\000\047\000\
\047\000\000\000\000\000\003\000\004\000\005\000\006\000\007\000\
\000\000\000\000\008\000\092\000\047\000\000\000\000\000\000\000\
\011\000\012\000\050\000\050\000\047\000\047\000\047\000\047\000\
\047\000\014\000\047\000\000\000\000\000\000\000\047\000\009\000\
\010\000\011\000\012\000\000\000\011\000\012\000\000\000\013\000\
\000\000\113\000\014\000\015\000\016\000\014\000\017\000\000\000\
\000\000\000\000\000\000\000\000\018\000\019\000\020\000\021\000\
\022\000\000\000\023\000\000\000\000\000\000\000\024\000\003\000\
\004\000\005\000\006\000\007\000\035\000\035\000\008\000\000\000\
\035\000\035\000\000\000\000\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\064\000\065\000\000\000\035\000\068\000\
\069\000\000\000\000\000\009\000\010\000\071\000\072\000\073\000\
\074\000\075\000\076\000\013\000\000\000\000\000\000\000\015\000\
\016\000\000\000\017\000\035\000\035\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\086\000\023\000\000\000\
\000\000\000\000\024\000\003\000\004\000\005\000\006\000\007\000\
\000\000\000\000\008\000\031\000\031\000\031\000\031\000\031\000\
\031\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\000\000\031\000\031\000\015\000\016\000\000\000\017\000\000\000\
\000\000\000\000\000\000\000\000\018\000\019\000\020\000\021\000\
\022\000\000\000\023\000\089\000\000\000\000\000\024\000\003\000\
\004\000\005\000\006\000\007\000\000\000\000\000\008\000\027\000\
\027\000\027\000\027\000\027\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\013\000\000\000\027\000\027\000\015\000\
\016\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\
\018\000\019\000\020\000\021\000\022\000\000\000\023\000\000\000\
\000\000\000\000\024\000\003\000\004\000\005\000\006\000\007\000\
\000\000\000\000\103\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\004\000\005\000\006\000\007\000\
\000\000\000\000\008\000\000\000\000\000\000\000\000\000\009\000\
\010\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\015\000\016\000\000\000\017\000\009\000\
\010\000\000\000\000\000\000\000\104\000\105\000\106\000\107\000\
\022\000\000\000\023\000\000\000\016\000\000\000\024\000\000\000\
\000\000\000\000\000\000\000\000\018\000\019\000\020\000\021\000\
\022\000\000\000\023\000\000\000\000\000\000\000\024\000\003\000\
\004\000\005\000\006\000\007\000\000\000\000\000\103\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\009\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\104\000\105\000\106\000\107\000\022\000\000\000\023\000\000\000\
\000\000\000\000\024\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\000\000\043\000\048\000\000\000\000\000\
\000\000\043\000\043\000\000\000\000\000\043\000\043\000\000\000\
\043\000\043\000\043\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\048\000\048\000\000\000\000\000\000\000\000\000\
\000\000\043\000\000\000\043\000\043\000"

let yycheck = "\001\000\
\016\000\046\000\027\000\017\000\017\000\016\000\010\000\011\000\
\047\000\097\000\001\000\013\000\097\000\005\001\047\000\097\000\
\123\000\099\000\005\001\115\000\022\000\023\000\118\000\035\001\
\005\001\026\001\009\001\010\001\053\000\054\000\013\001\014\001\
\046\000\026\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\033\001\048\001\049\001\027\001\057\001\096\000\135\000\
\098\000\049\001\135\000\005\001\048\001\160\000\027\001\100\000\
\057\001\058\001\018\001\019\001\020\001\021\001\022\001\023\001\
\097\000\048\001\049\001\059\001\022\001\157\000\158\000\022\001\
\157\000\158\000\005\001\157\000\048\001\049\001\031\001\032\001\
\094\000\095\000\096\000\036\001\098\000\099\000\100\000\040\001\
\048\001\049\001\135\000\009\001\010\001\022\001\038\001\013\001\
\014\001\136\000\005\001\017\001\009\001\010\001\135\000\136\000\
\013\001\014\001\120\000\120\000\017\001\113\000\097\000\098\000\
\114\000\158\000\116\000\117\000\058\001\133\000\027\001\121\000\
\145\000\132\000\025\001\125\000\157\000\158\000\018\001\019\001\
\020\001\021\001\022\001\023\001\055\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\150\000\163\000\163\000\027\001\
\168\000\026\001\031\001\032\001\048\001\049\001\001\001\002\001\
\003\001\004\001\005\001\040\001\166\000\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\035\001\058\001\026\001\
\027\001\057\001\029\001\030\001\031\001\032\001\039\001\058\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\057\001\044\001\057\001\049\001\049\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\055\001\060\001\094\000\001\001\002\001\003\001\004\001\005\001\
\057\001\094\000\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\095\000\095\000\026\001\027\001\016\000\029\001\
\030\001\031\001\032\001\096\000\099\000\035\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\100\000\044\001\047\000\
\121\000\166\000\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\255\255\060\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\031\001\032\001\
\026\001\027\001\035\001\029\001\030\001\031\001\032\001\040\001\
\255\255\035\001\036\001\255\255\038\001\039\001\040\001\255\255\
\042\001\255\255\255\255\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\255\255\060\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\255\255\029\001\
\030\001\031\001\032\001\255\255\255\255\035\001\036\001\255\255\
\038\001\039\001\040\001\255\255\042\001\255\255\255\255\255\255\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\255\255\060\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\255\255\
\026\001\027\001\255\255\029\001\030\001\031\001\032\001\255\255\
\255\255\035\001\036\001\255\255\038\001\039\001\040\001\255\255\
\042\001\255\255\255\255\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\255\255\060\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\255\255\029\001\
\030\001\031\001\032\001\255\255\255\255\035\001\036\001\255\255\
\038\001\039\001\040\001\255\255\042\001\255\255\255\255\255\255\
\255\255\255\255\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\255\255\060\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\255\255\
\026\001\027\001\255\255\029\001\030\001\031\001\032\001\255\255\
\255\255\035\001\036\001\255\255\038\001\039\001\040\001\255\255\
\042\001\255\255\255\255\255\255\255\255\255\255\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\255\255\060\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\027\001\255\255\029\001\
\030\001\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\026\001\042\001\255\255\255\255\255\255\
\031\001\032\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\040\001\056\001\255\255\255\255\255\255\060\001\029\001\
\030\001\031\001\032\001\255\255\031\001\032\001\255\255\037\001\
\255\255\036\001\040\001\041\001\042\001\040\001\044\001\255\255\
\255\255\255\255\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\255\255\056\001\255\255\255\255\255\255\060\001\001\001\
\002\001\003\001\004\001\005\001\009\001\010\001\008\001\255\255\
\013\001\014\001\255\255\255\255\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\011\001\012\001\255\255\027\001\015\001\
\016\001\255\255\255\255\029\001\030\001\018\001\019\001\020\001\
\021\001\022\001\023\001\037\001\255\255\255\255\255\255\041\001\
\042\001\255\255\044\001\048\001\049\001\255\255\255\255\255\255\
\050\001\051\001\052\001\053\001\054\001\055\001\056\001\255\255\
\255\255\255\255\060\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\027\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\255\255\048\001\049\001\041\001\042\001\255\255\044\001\255\255\
\255\255\255\255\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\255\255\056\001\057\001\255\255\255\255\060\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\037\001\255\255\048\001\049\001\041\001\
\042\001\255\255\044\001\255\255\255\255\255\255\255\255\255\255\
\050\001\051\001\052\001\053\001\054\001\255\255\056\001\255\255\
\255\255\255\255\060\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\255\255\255\255\255\255\255\255\029\001\
\030\001\255\255\255\255\255\255\255\255\255\255\255\255\037\001\
\255\255\255\255\255\255\041\001\042\001\255\255\044\001\029\001\
\030\001\255\255\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\255\255\056\001\255\255\042\001\255\255\060\001\255\255\
\255\255\255\255\255\255\255\255\050\001\051\001\052\001\053\001\
\054\001\255\255\056\001\255\255\255\255\255\255\060\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\042\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\050\001\051\001\052\001\053\001\054\001\255\255\056\001\255\255\
\255\255\255\255\060\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\255\255\255\255\
\255\255\031\001\032\001\255\255\255\255\035\001\036\001\255\255\
\038\001\039\001\040\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\048\001\049\001\255\255\255\255\255\255\255\255\
\255\255\055\001\255\255\057\001\058\001"

let yynames_const = "\
  NEG\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  DPLUS\000\
  DMINUS\000\
  DTIMES\000\
  DDIV\000\
  CARAT\000\
  LT\000\
  GT\000\
  LEQ\000\
  GEQ\000\
  EQUALS\000\
  NEQ\000\
  PIPE\000\
  ARROW\000\
  SEMI\000\
  DCOLON\000\
  AT\000\
  NIL\000\
  LET\000\
  LOCAL\000\
  VAL\000\
  REC\000\
  AND\000\
  END\000\
  IN\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FUN\000\
  FN\000\
  OP\000\
  MOD\000\
  RAISE\000\
  HANDLE\000\
  WITH\000\
  NOT\000\
  ANDALSO\000\
  ORELSE\000\
  HD\000\
  TL\000\
  FST\000\
  SND\000\
  LBRAC\000\
  RBRAC\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  UNDERSCORE\000\
  UNIT\000\
  ERROR\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  REAL\000\
  BOOL\000\
  STRING\000\
  IDENT\000\
  OPCOM\000\
  CLCOM\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 31 "student.mly"
                                                ( Val("it", _1) )
# 607 "student.ml"
               : Mp8common.dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dec) in
    Obj.repr(
# 32 "student.mly"
                                                ( _1 )
# 614 "student.ml"
               : Mp8common.dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_dec) in
    Obj.repr(
# 35 "student.mly"
                                                ( _1 )
# 621 "student.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'dec) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_dec) in
    Obj.repr(
# 36 "student.mly"
                                                ( Seq(_1, _2) )
# 629 "student.ml"
               : 'dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simp_bind) in
    Obj.repr(
# 39 "student.mly"
                                                ( Val (fst _2, snd _2) )
# 636 "student.ml"
               : 'atomic_dec))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'rec_var_param_bind) in
    Obj.repr(
# 40 "student.mly"
                                                ( Rec (_3, fst _4, snd _4) )
# 644 "student.ml"
               : 'atomic_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'rec_var_param_bind) in
    Obj.repr(
# 41 "student.mly"
                                                ( Rec (_2, fst _3, snd _3) )
# 652 "student.ml"
               : 'atomic_dec))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'dec) in
    Obj.repr(
# 42 "student.mly"
                                                ( Local(_2, _4) )
# 660 "student.ml"
               : 'atomic_dec))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 45 "student.mly"
                                   ( (_1, _3) )
# 668 "student.ml"
               : 'rec_var_param_bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'rec_var_param_bind) in
    Obj.repr(
# 46 "student.mly"
                                   ( (_1, FnExp(fst _2, snd _2) ) )
# 676 "student.ml"
               : 'rec_var_param_bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 49 "student.mly"
                                   ( (_1, _3) )
# 684 "student.ml"
               : 'simp_bind))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 50 "student.mly"
                                   ( ("", _3) )
# 691 "student.ml"
               : 'simp_bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'or_else_exp) in
    Obj.repr(
# 53 "student.mly"
                                     ( _1 )
# 698 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 54 "student.mly"
                                     ( _1 )
# 705 "student.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 57 "student.mly"
                                      ( _1 )
# 712 "student.ml"
               : 'expression_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expression_seq) in
    Obj.repr(
# 58 "student.mly"
                                      ( LetExp(Val("", _1), _3) )
# 720 "student.ml"
               : 'expression_seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_else_no_ifr_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_also_exp) in
    Obj.repr(
# 61 "student.mly"
                                                   ( cr_orelse _1 _3 )
# 728 "student.ml"
               : 'or_else_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_also_exp) in
    Obj.repr(
# 62 "student.mly"
                                                   ( _1 )
# 735 "student.ml"
               : 'or_else_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'or_else_no_ifr_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'and_also_no_ifr_exp) in
    Obj.repr(
# 65 "student.mly"
                                                   ( cr_orelse _1 _3 )
# 743 "student.ml"
               : 'or_else_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'and_also_no_ifr_exp) in
    Obj.repr(
# 66 "student.mly"
                                                   ( _1 )
# 750 "student.ml"
               : 'or_else_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_also_no_ifr_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'comp_exp) in
    Obj.repr(
# 69 "student.mly"
                                                   ( cr_andalso _1 _3 )
# 758 "student.ml"
               : 'and_also_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comp_exp) in
    Obj.repr(
# 70 "student.mly"
                                                   ( _1 )
# 765 "student.ml"
               : 'and_also_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'and_also_no_ifr_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'comp_no_ifr_exp) in
    Obj.repr(
# 73 "student.mly"
                                                   ( cr_andalso _1 _3 )
# 773 "student.ml"
               : 'and_also_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comp_no_ifr_exp) in
    Obj.repr(
# 74 "student.mly"
                                                   ( _1 )
# 780 "student.ml"
               : 'and_also_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comp_no_ifr_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_exp) in
    Obj.repr(
# 77 "student.mly"
                                                   ( _2 _1 _3 )
# 789 "student.ml"
               : 'comp_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cons_exp) in
    Obj.repr(
# 78 "student.mly"
                                                   ( _1 )
# 796 "student.ml"
               : 'comp_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'comp_no_ifr_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'comp_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_no_ifr_exp) in
    Obj.repr(
# 81 "student.mly"
                                                   ( _2 _1 _3 )
# 805 "student.ml"
               : 'comp_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cons_no_ifr_exp) in
    Obj.repr(
# 82 "student.mly"
                                                   ( _1 )
# 812 "student.ml"
               : 'comp_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_no_ifr_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cons_exp) in
    Obj.repr(
# 85 "student.mly"
                                                   ( bin_app ConsOp _1 _3 )
# 820 "student.ml"
               : 'cons_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_exp) in
    Obj.repr(
# 86 "student.mly"
                                                   ( _1 )
# 827 "student.ml"
               : 'cons_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cons_no_ifr_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_no_ifr_exp) in
    Obj.repr(
# 89 "student.mly"
                                                   ( bin_app ConsOp _1 _3 )
# 835 "student.ml"
               : 'cons_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_no_ifr_exp) in
    Obj.repr(
# 90 "student.mly"
                                                   ( _1 )
# 842 "student.ml"
               : 'cons_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_no_ifr_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'add_sub_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_div_exp) in
    Obj.repr(
# 93 "student.mly"
                                                   ( _2 _1 _3 )
# 851 "student.ml"
               : 'add_sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_div_exp) in
    Obj.repr(
# 94 "student.mly"
                                                   ( _1 )
# 858 "student.ml"
               : 'add_sub_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'add_sub_no_ifr_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'add_sub_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'mult_div_no_ifr_exp) in
    Obj.repr(
# 97 "student.mly"
                                                      ( _2 _1 _3 )
# 867 "student.ml"
               : 'add_sub_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mult_div_no_ifr_exp) in
    Obj.repr(
# 98 "student.mly"
                                                   ( _1 )
# 874 "student.ml"
               : 'add_sub_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_div_no_ifr_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'div_mult_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'non_op_exp) in
    Obj.repr(
# 101 "student.mly"
                                                   ( _2 _1 _3 )
# 883 "student.ml"
               : 'mult_div_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_op_exp) in
    Obj.repr(
# 102 "student.mly"
                                                   ( _1 )
# 890 "student.ml"
               : 'mult_div_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'mult_div_no_ifr_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'div_mult_op) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'app_no_ifr_exp) in
    Obj.repr(
# 105 "student.mly"
                                                   ( _2 _1 _3 )
# 899 "student.ml"
               : 'mult_div_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app_no_ifr_exp) in
    Obj.repr(
# 106 "student.mly"
                                                   ( _1 )
# 906 "student.ml"
               : 'mult_div_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_fn_raise_exp) in
    Obj.repr(
# 109 "student.mly"
                                            ( _1 )
# 913 "student.ml"
               : 'non_op_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 110 "student.mly"
                                            ( _1 )
# 920 "student.ml"
               : 'non_op_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_mon_exp) in
    Obj.repr(
# 113 "student.mly"
                                              ( _1 )
# 927 "student.ml"
               : 'app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mon_op) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'app_exp) in
    Obj.repr(
# 114 "student.mly"
                                              ( MonOpAppExp(_1, _2) )
# 935 "student.ml"
               : 'app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'app_no_ifr_mo_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'non_app_exp) in
    Obj.repr(
# 115 "student.mly"
                                              ( AppExp(_1, _2) )
# 943 "student.ml"
               : 'app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_exp) in
    Obj.repr(
# 118 "student.mly"
                                            ( _1 )
# 950 "student.ml"
               : 'app_no_ifr_mo_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'app_no_ifr_mo_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_mon_exp) in
    Obj.repr(
# 119 "student.mly"
                                            ( AppExp(_1, _2) )
# 958 "student.ml"
               : 'app_no_ifr_mo_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_mon_exp) in
    Obj.repr(
# 122 "student.mly"
                                              ( _1 )
# 965 "student.ml"
               : 'app_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'mon_op) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'app_no_ifr_exp) in
    Obj.repr(
# 123 "student.mly"
                                              ( MonOpAppExp(_1, _2) )
# 973 "student.ml"
               : 'app_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'app_no_ifr_mo_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_mon_exp) in
    Obj.repr(
# 124 "student.mly"
                                              ( AppExp(_1, _2) )
# 981 "student.ml"
               : 'app_no_ifr_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_mon_exp) in
    Obj.repr(
# 127 "student.mly"
                                              ( _1 )
# 988 "student.ml"
               : 'non_app_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_fn_raise_exp) in
    Obj.repr(
# 128 "student.mly"
                                              ( _1 )
# 995 "student.ml"
               : 'non_app_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'or_else_exp) in
    Obj.repr(
# 131 "student.mly"
                                                    ( IfExp(_2, _4, _6) )
# 1004 "student.ml"
               : 'if_fn_raise_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'or_else_exp) in
    Obj.repr(
# 132 "student.mly"
                                                    ( FnExp(_2, _4) )
# 1012 "student.ml"
               : 'if_fn_raise_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'or_else_exp) in
    Obj.repr(
# 133 "student.mly"
                                                    ( RaiseExp _2 )
# 1019 "student.ml"
               : 'if_fn_raise_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_exp) in
    Obj.repr(
# 136 "student.mly"
                       ( _1 )
# 1026 "student.ml"
               : 'app_exp_mon_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mon_op_exp) in
    Obj.repr(
# 137 "student.mly"
                       ( FnExp("x", _1 (VarExp "x") ) )
# 1033 "student.ml"
               : 'app_exp_mon_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_exp) in
    Obj.repr(
# 140 "student.mly"
                                   ( _1 )
# 1040 "student.ml"
               : 'atomic_mon_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'mon_op_exp) in
    Obj.repr(
# 141 "student.mly"
                                   ( FnExp( "x", _1 (VarExp ("x") ) ) )
# 1047 "student.ml"
               : 'atomic_mon_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const_exp) in
    Obj.repr(
# 144 "student.mly"
                                   ( ConstExp _1 )
# 1054 "student.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bin_op) in
    Obj.repr(
# 145 "student.mly"
                                   ( FnExp("x", (FnExp("y", _2 (VarExp "x") (VarExp "y")))) )
# 1061 "student.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 146 "student.mly"
                                   ( VarExp _1 )
# 1068 "student.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'paren_exp) in
    Obj.repr(
# 147 "student.mly"
                                   ( _1 )
# 1075 "student.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'list_exp) in
    Obj.repr(
# 148 "student.mly"
                                   ( _1 )
# 1082 "student.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'dec) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression_seq) in
    Obj.repr(
# 149 "student.mly"
                                   ( LetExp(_2, _4) )
# 1090 "student.ml"
               : 'atomic_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 152 "student.mly"
                                   ( IntConst _1 )
# 1097 "student.ml"
               : 'const_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 153 "student.mly"
                                   ( BoolConst _1 )
# 1104 "student.ml"
               : 'const_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 154 "student.mly"
                                   ( RealConst _1 )
# 1111 "student.ml"
               : 'const_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 155 "student.mly"
                                   ( StringConst _1 )
# 1118 "student.ml"
               : 'const_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 156 "student.mly"
                                   ( NilConst )
# 1124 "student.ml"
               : 'const_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "student.mly"
                                   ( NilConst )
# 1130 "student.ml"
               : 'const_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "student.mly"
                                   ( UnitConst )
# 1136 "student.ml"
               : 'const_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 159 "student.mly"
                                   ( UnitConst )
# 1142 "student.ml"
               : 'const_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comp_op) in
    Obj.repr(
# 162 "student.mly"
                                   ( _1 )
# 1149 "student.ml"
               : 'bin_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'add_sub_op) in
    Obj.repr(
# 163 "student.mly"
                                   ( _1 )
# 1156 "student.ml"
               : 'bin_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'div_mult_op) in
    Obj.repr(
# 164 "student.mly"
                                   ( _1 )
# 1163 "student.ml"
               : 'bin_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 165 "student.mly"
                                   ( fun x y -> bin_app ConsOp x y )
# 1169 "student.ml"
               : 'bin_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 166 "student.mly"
                                   ( fun x y -> bin_app CommaOp x y )
# 1175 "student.ml"
               : 'bin_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bin_op) in
    Obj.repr(
# 169 "student.mly"
                                   ( fun x -> fun y -> _1 x y )
# 1182 "student.ml"
               : 'bin_op_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 172 "student.mly"
                                   ( fun x y -> bin_app IntPlusOp x y )
# 1188 "student.ml"
               : 'add_sub_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 173 "student.mly"
                                   ( fun x y -> bin_app RealPlusOp x y )
# 1194 "student.ml"
               : 'add_sub_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 174 "student.mly"
                                   ( fun x y -> bin_app IntMinusOp x y )
# 1200 "student.ml"
               : 'add_sub_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 175 "student.mly"
                                   ( fun x y -> bin_app RealMinusOp x y )
# 1206 "student.ml"
               : 'add_sub_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "student.mly"
                                   ( fun x y -> bin_app ConcatOp x y )
# 1212 "student.ml"
               : 'add_sub_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "student.mly"
                                   ( fun x y -> bin_app IntDivOp x y )
# 1218 "student.ml"
               : 'div_mult_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 180 "student.mly"
                                   ( fun x y -> bin_app RealDivOp x y )
# 1224 "student.ml"
               : 'div_mult_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "student.mly"
                                   ( fun x y -> bin_app IntTimesOp x y )
# 1230 "student.ml"
               : 'div_mult_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 182 "student.mly"
                                   ( fun x y -> bin_app RealTimesOp x y )
# 1236 "student.ml"
               : 'div_mult_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 185 "student.mly"
                ( fun x -> mon_app IntNegOp x )
# 1242 "student.ml"
               : 'mon_op_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "student.mly"
                ( fun x -> mon_app HdOp x )
# 1248 "student.ml"
               : 'mon_op_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "student.mly"
                ( fun x -> mon_app TlOp x )
# 1254 "student.ml"
               : 'mon_op_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "student.mly"
                ( fun x -> mon_app FstOp x )
# 1260 "student.ml"
               : 'mon_op_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "student.mly"
                ( fun x -> mon_app SndOp x )
# 1266 "student.ml"
               : 'mon_op_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "student.mly"
                ( IntNegOp )
# 1272 "student.ml"
               : 'mon_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 193 "student.mly"
                ( HdOp )
# 1278 "student.ml"
               : 'mon_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 194 "student.mly"
                ( TlOp )
# 1284 "student.ml"
               : 'mon_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 195 "student.mly"
                ( FstOp )
# 1290 "student.ml"
               : 'mon_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 196 "student.mly"
                ( SndOp )
# 1296 "student.ml"
               : 'mon_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 199 "student.mly"
                     ( bin_app GreaterOp )
# 1302 "student.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "student.mly"
                     ( bin_app EqOp )
# 1308 "student.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'desug_comp_op) in
    Obj.repr(
# 201 "student.mly"
                     ( _1 )
# 1315 "student.ml"
               : 'comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 204 "student.mly"
                   ( fun x y -> bin_app GreaterOp y x )
# 1321 "student.ml"
               : 'desug_comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 205 "student.mly"
                   ( fun x y -> cr_orelse 
                        (bin_app GreaterOp y x)
                        (bin_app EqOp x y)
                   )
# 1330 "student.ml"
               : 'desug_comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 209 "student.mly"
                   ( fun x y -> cr_orelse 
                        (bin_app GreaterOp x y)
                        (bin_app EqOp x y)
                   )
# 1339 "student.ml"
               : 'desug_comp_op))
; (fun __caml_parser_env ->
    Obj.repr(
# 213 "student.mly"
                   ( fun x y -> IfExp(
                        bin_app EqOp x y, 
                        ConstExp(BoolConst false),
                        ConstExp(BoolConst true))
                   )
# 1349 "student.ml"
               : 'desug_comp_op))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list_inner_exp) in
    Obj.repr(
# 221 "student.mly"
                                                      ( _2 )
# 1356 "student.ml"
               : 'list_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 224 "student.mly"
                                                      ( bin_app ConsOp _1 (ConstExp NilConst) )
# 1363 "student.ml"
               : 'list_inner_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list_inner_exp) in
    Obj.repr(
# 225 "student.mly"
                                                      ( bin_app ConsOp _1 _3 )
# 1371 "student.ml"
               : 'list_inner_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expression) in
    Obj.repr(
# 228 "student.mly"
                                                      ( _2 )
# 1378 "student.ml"
               : 'paren_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expression_seq) in
    Obj.repr(
# 229 "student.mly"
                                                      ( LetExp(Val("", _2), _4) )
# 1386 "student.ml"
               : 'paren_exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'pair_exp) in
    Obj.repr(
# 230 "student.mly"
                                                      ( bin_app CommaOp _2 _4 )
# 1394 "student.ml"
               : 'paren_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expression) in
    Obj.repr(
# 233 "student.mly"
                                                ( _1 )
# 1401 "student.ml"
               : 'pair_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'pair_exp) in
    Obj.repr(
# 234 "student.mly"
                                                ( LetExp(Val("", _1), _3) )
# 1409 "student.ml"
               : 'pair_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 237 "student.mly"
                 ( Some _1 )
# 1416 "student.ml"
               : 'pat))
; (fun __caml_parser_env ->
    Obj.repr(
# 238 "student.mly"
                 ( None )
# 1422 "student.ml"
               : 'pat))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Mp8common.dec)
